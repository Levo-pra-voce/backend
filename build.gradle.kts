/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    java
    id("org.graalvm.buildtools.native") version "0.9.28"
    id("org.springframework.boot") version "3.2.0"
    id("io.spring.dependency-management") version "1.1.4"
}

repositories {
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
        url = uri("https://raw.githubusercontent.com/graalvm/native-build-tools/snapshots")
    }
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Spring
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.postgresql:postgresql")
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-mail:3.1.5")

    // JWT - Authentication
    implementation("io.jsonwebtoken:jjwt-api:0.12.5")
    implementation("io.jsonwebtoken:jjwt-impl:0.12.5")
    implementation("io.jsonwebtoken:jjwt-jackson:0.12.5")

    // Spring - Test
    runtimeOnly("com.h2database:h2")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.mockito:mockito-core")
    testImplementation("junit:junit:4.13.2")
    runtimeOnly("ch.qos.logback:logback-classic")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    implementation(kotlin("stdlib-jdk8"))
    runtimeOnly("com.h2database:h2")
    implementation("com.h2database:h2:1.3.148")

    // LOMBOK
    compileOnly("org.projectlombok:lombok:1.18.30")
    annotationProcessor("org.projectlombok:lombok:1.18.30")
    testCompileOnly("org.projectlombok:lombok:1.18.30")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.30")

    // MapStruct - generate mapper
    implementation("org.mapstruct:mapstruct:1.5.5.Final")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")

    // guava - cache
    implementation("com.google.guava:guava:latest.release")

    // Apache Commons
    implementation("org.apache.commons:commons-lang3:3.14.0")


    // Apache POI - Excel
    implementation("org.apache.poi:poi:5.2.5")
    implementation("org.apache.poi:poi-ooxml:5.2.5")

    // Flyway - Database migration
    implementation("org.flywaydb:flyway-core:10.13.0")
    runtimeOnly("org.flywaydb:flyway-database-postgresql:10.13.0")

    // Jackson
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1")

    // Extras
    implementation("javax.xml.bind:jaxb-api:2.3.1")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.17.1")
    implementation("javax.persistence:javax.persistence-api:2.2")
    implementation("com.mapbox.mapboxsdk:mapbox-sdk-turf:5.8.0")
}

group = "com.levo-pra-voce"
version = "0.0.1-SNAPSHOT"
description = "levo pra voce backend"

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.jar {
    manifest {
        attributes(
                "Main-Class" to "com.levopravoce.backend.BackendApplication",
        )
    }
}

tasks.getByName<Jar>("jar") {
    enabled = false
}

//graalvmNative {
//    binaries {
//        named("main") {
//            imageName.set("levo-pra-voce")
//            mainClass.set("com.levopravoce.backend.BackendApplication")
//            buildArgs.add("-O4")
//            javaLauncher.set(javaToolchains.launcherFor {
//                languageVersion.set(JavaLanguageVersion.of(17))
//                vendor.set(JvmVendorSpec.matching("GraalVM"))
//            })
//        }
//    }
//    binaries.all {
//        buildArgs.add("--verbose")
//    }
//}